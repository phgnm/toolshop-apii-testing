{
	"info": {
		"_postman_id": "3dcd4e55-0435-422e-9dba-3cb76ebdcd26",
		"name": "Favorite API - Toolshop",
		"description": "API testing for favorites: GET, POST, DELETE with comprehensive test scripts",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "43269229"
	},
	"item": [
		{
			"name": "Get All Favorites",
			"item": [
				{
					"name": "Get All Favorites (Valid - 200 OK)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    let json = pm.response.json();",
									"    pm.expect(json).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Each item has id and product_id\", function () {",
									"    let json = pm.response.json();",
									"    json.forEach(item => {",
									"        pm.expect(item).to.have.property('id');",
									"        pm.expect(item).to.have.property('product_id');",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/favorites",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"favorites"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Favorites (Unauthorized - 401)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{invalid_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/favorites",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"favorites"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Favorites (Not Found - 404)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/favorite",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"favorite"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Favorites (Method Not Allowed - 405)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 405\", function () {",
									"    pm.response.to.have.status(405);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/favorites",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"favorites"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Add Favorite",
			"item": [
				{
					"name": "Add Favorite (Valid - 201 Created or 409 Conflict)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 or 422 (if already exists)\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 422]);",
									"});",
									"",
									"if (pm.response.code === 201) {",
									"    pm.test(\"Response contains id and product_id for 201\", function () {",
									"        let json = pm.response.json();",
									"        pm.expect(json).to.have.property('id');",
									"        pm.expect(json).to.have.property('product_id').and.eql(101);",
									"    });",
									"} else if (pm.response.code === 422) {",
									"    let errorMessage = '';",
									"    try {",
									"        let json = pm.response.json();",
									"        if (json && json.error) {",
									"            errorMessage = json.error;",
									"        } else if (json && json.message) {",
									"            errorMessage = json.message;",
									"        } else {",
									"            errorMessage = pm.response.text().substring(0, 100) + '...'; ",
									"        }",
									"    } catch (e) {",
									"        errorMessage = pm.response.text().substring(0, 100) + '...';",
									"    }",
									"    pm.test(`Response for 422 indicates error: ${errorMessage}`, function () {",
									"        console.log(\"Error\");",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"product_id\": {{itemId}}}"
						},
						"url": {
							"raw": "{{base_url}}/favorites",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"favorites"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Favorite (Unauthorized - 401)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{invalid_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"product_id\": {{itemId}}}"
						},
						"url": {
							"raw": "{{base_url}}/favorites",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"favorites"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Favorite (Not Found - 404 - if applicable)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"product_id\": 103}"
						},
						"url": {
							"raw": "{{base_url}}/favorite",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"favorite"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Favorite (Unprocessable Entity - 422 - Invalid product_id)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422 for invalid product_id\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"if (pm.response.code === 422) {",
									"    let errorMessage = '';",
									"    try {",
									"        let json = pm.response.json();",
									"        if (json && json.error) {",
									"            errorMessage = json.error;",
									"        } else if (json && json.product_id) {",
									"            errorMessage = json.product_id;",
									"        } else {",
									"            errorMessage = pm.response.text().substring(0, 100) + '...'; ",
									"        }",
									"    } catch (e) {",
									"        errorMessage = pm.response.text().substring(0, 100) + '...';",
									"    }",
									"    pm.test(`Response for 422 indicates error: ${errorMessage}`, function () {",
									"        console.log(\"Error\");",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"product_id\": \"not_a_number\"}"
						},
						"url": {
							"raw": "{{base_url}}/favorites",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"favorites"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Favorite (Unprocessable Entity - 422 - Missing product_id)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422 for missing product_id\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"if (pm.response.code === 422) {",
									"    let errorMessage = '';",
									"    try {",
									"        let json = pm.response.json();",
									"        if (json && json.error) {",
									"            errorMessage = json.error;",
									"        } else if (json && json.product_id) {",
									"            errorMessage = json.product_id;",
									"        } else {",
									"            errorMessage = pm.response.text().substring(0, 100) + '...'; ",
									"        }",
									"    } catch (e) {",
									"        errorMessage = pm.response.text().substring(0, 100) + '...';",
									"    }",
									"    pm.test(`Response for 422 indicates error: ${errorMessage}`, function () {",
									"        console.log(\"Error\");",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{base_url}}/favorites",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"favorites"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete Favorite",
			"item": [
				{
					"name": "Delete Favorite (Valid ID - 200/204)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
									"});",
									"// If your API returns a body on 200, you can add checks here.",
									"if (pm.response.code === 200) {",
									"    pm.test(\"Response indicates successful deletion\", function () {",
									"        // pm.expect(pm.response.json().message).to.eql('Favorite deleted successfully');",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/favorites/501",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"favorites",
								"501"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Favorite (Unauthorized - 401)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{invalid_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/favorites/502",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"favorites",
								"502"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Favorite (Not Found - 404)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/favorites/9999999999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"favorites",
								"9999999999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Favorite (Method Not Allowed - 405)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 405\", function () {",
									"    pm.response.to.have.status(405);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/favorites/503",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"favorites",
								"503"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Favorite (Conflict - 409 - if applicable)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {",
									"    // This test assumes a specific scenario where deleting favorite ID 600 causes a conflict.",
									"    // You might need to adjust the ID and your backend logic to trigger this.",
									"    pm.response.to.have.status(409);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/favorites/600",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"favorites",
								"600"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Favorite (Unprocessable Entity - 422 - Invalid ID format)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"pm.test(\"Response indicates invalid ID format\", function () {",
									"    let json = pm.response.json();",
									"    pm.expect(json).to.have.property('error'); // Or 'message'",
									"    // pm.expect(json.error).to.include('Invalid ID format');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/favorites/not_an_id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"favorites",
								"not_an_id"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}